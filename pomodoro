#!/usr/bin/env bash
readonly WORK_INTERVAL=25
readonly BREAK_INTERVAL=5
readonly USAGE="usage: $0 [options]

Simple command line pomodoro timer that allows batching timers and pops up
alerts when time is up.

OPTIONS

    -w:         work for $WORK_INTERVAL minutes
    -b:         take a $BREAK_INTERVAL minute break
    -W MINUTES: work for the given number of minutes
    -B MINUTES: take a break for the given number of minutes"

readonly BASENAME="$(basename "$0")"

readonly RED="$(tput setaf 1)"
readonly BOLD="$(tput bold)"
readonly END="$(tput sgr0)"

is_integer() {
    [[ "$1" =~ ^[[:digit:]]+$ ]]
}

err() {
    echo "$RED$BOLD$*$END" >&2
}

fail() {
    err "$*"
    exit 1
}

alert() {
    zenity --info --title="$BASENAME" --text="$*" 2>/dev/null
}

timer() {
    local interval="$1"
    local msg="$2"
    if [[ "$msg" == "" ]]; then
        msg="%s minutes remaining"
    fi
    for ((i="$interval"; i > 0; i--)); do
        printf "$msg\n" "$i"
        sleep 60
    done
}

do_work() {
    local -r interval="$1"
    timer "$interval" "%s minutes of work remaining"
    alert "All done working!"
}

do_break() {
    local -r interval="$1"
    timer "$interval" "%s minutes of break time remaining"
    alert "Get back to work!"
}

main() {
    for arg in "$@"; do
        case "$arg" in
            -h|-help|--help)
                echo "$USAGE"
                exit 0
                ;;
        esac
    done
    while (( "$#" )); do
        case "$1" in
            -w) do_work "$WORK_INTERVAL" ;;
            -b) do_break "$BREAK_INTERVAL" ;;
            -W) shift
                do_work "$1" ;;
            -B) shift
                do_break "$1" ;;
            *) echo "error: unrecognized argument $1"
               exit 1
               ;;
        esac
        shift
    done
}
main "$@"
